{"version":3,"sources":["components/header/header.jsx","storage/storage.jsx","components/boardBox/boardBox.jsx","components/popup/popup.jsx","utils/functions.js","components/board/board.jsx","components/scoreboard/scoreboard.jsx","components/app/app.jsx","index.js"],"names":["Header","props","showBackButton","className","href","to","Storage","storageName","initialValue","getData","JSON","parse","localStorage","getItem","update","data","setItem","stringify","this","BoardBox","onClick","value","Popup","message","id","findWinner","boxes","rows","i","length","a","b","c","areAllBoxesClicked","count","forEach","item","Board","storage","handleBoxClick","index","state","slice","history","Utils","boxMark","xIsNext","push","setState","Array","fill","bind","status","winner","isFilled","old_storage","concat","map","move","key","React","Component","Scoreboard","scoreboard","leader","App","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eda1c299.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Don't forget to import the component's style!\r\nimport './header.scss';\r\n\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\n// This is a stateless component!\r\nexport const Header = (props) => {\r\n    const showBackButton = props.showBackButton;\r\n    return (\r\n        <div className=\"topnav\">\r\n\r\n            <div className=\"topnav-centered\">\r\n                <a href=\"#home\" className=\"active\">Tic Tac Toe in ReactJS!</a>\r\n            </div>\r\n\r\n            {showBackButton===true ?\r\n             <Link to=\"/\">&lt; Back to Scoreboard</Link> :\r\n             <Link to=\"/\" className=\"hidden\">&lt; Back to Scoreboard</Link> \r\n            }\r\n\r\n        </div>\r\n    );\r\n}","// This is an object that will allow us to create and update data in browser's localStorage object.\r\nconst STORAGE_NAME = 'tictactoeScoreboard';\r\n\r\nexport class Storage {\r\n    // Warning: You shouldn't save important data in the local storage and less if the data\r\n    // is not encrypted.\r\n    // I am doing this in plain text just because this is an example!\r\n    constructor(storageName = STORAGE_NAME, initialValue = '[]') {\r\n        this.storageName = storageName;\r\n\r\n        // We need to check if the current browser's localStorage already contains any\r\n        // data from previous games\r\n        if(!localStorage.getItem(storageName)) {\r\n            // If not, create a new item for our game!\r\n            localStorage.setItem(storageName, initialValue);\r\n        }\r\n    }\r\n\r\n    // The following function is used to load the data from previous games from localStorage\r\n    // So it will load them even if the browser was closed!\r\n    getData = () => {\r\n        return JSON.parse(localStorage.getItem(this.storageName));\r\n    }\r\n\r\n    // And this function will be used to save/update the data in localStorage\r\n    update = (data) => {\r\n        localStorage.setItem(this.storageName, JSON.stringify(data));\r\n    }\r\n}","import React from 'react';\r\n\r\n// Don't forget to import the component's style!\r\nimport './boardBox.scss';\r\n\r\n// In other projects like the Search Autocomplete we have seen one\r\n// way to create React Components by extending the React.Component class.\r\n// Now we are going to see another way (a little bit shorter)\r\nexport const BoardBox = (props) => {\r\n    // We will get the onClick function from our props!\r\n    return (\r\n        <button className=\"boardBox\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\n\r\n// Don't forget to import the component's style!\r\nimport './popup.scss';\r\n\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n// This is a stateless component!\r\nexport const Popup = (props) => {\r\n    const message = props.message;\r\n    return (\r\n        <div className=\"popup\">\r\n\r\n            <div className=\"popup-wrapper\">\r\n                <div className=\"popup-inner\">\r\n                    <h2>{message}</h2>\r\n                    <Link to=\"/\" id=\"btnPopupNewGame\">Back To Menu</Link>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}","\r\n// This function is used to find a winner inside an array with 9 elements\r\nexport function findWinner(boxes) {\r\n    // The following array has all the winning combinations\r\n    // for a 3x3 Tic Tac Toe game\r\n    const rows = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    // To find is our current array (boxes) is winner or not\r\n    // we have to iterate over it looking for winning combinations\r\n    for(let i = 0; i < rows.length; i++){\r\n        // Get the current combination's winning rows\r\n        const [a, b, c] = rows[i];\r\n\r\n        // Now check if in our current array those elements\r\n        // are from the same player\r\n        if(boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]){\r\n            // We have a winner!!\r\n            // Let's return it ('x' or 'o')\r\n            return boxes[a];\r\n        }\r\n    }\r\n\r\n    // If we don't have winner, we return null\r\n    return null;\r\n}\r\n\r\n// This function is used to check if all the boxes are clicked\r\n// So every element in the given array is not null\r\nexport function areAllBoxesClicked(boxes){\r\n    // Let's declare a var to store the current number of clicked boxes\r\n    let count = 0;\r\n\r\n    // Now let's iterate over every box to check them!\r\n    boxes.forEach(function(item){\r\n        // Check if the box is not null\r\n        // Remember we initialized the array setting every element as null\r\n        // So if the element is not null, a player must have clicked on it\r\n        if(item !== null){\r\n            // If player clicked on it, increase the count by 1\r\n            count+=1;\r\n        }\r\n    });\r\n\r\n    // Check if all boxes were clicked\r\n    if(count === 9) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}","// This will be a stateful component (and also the main board for our game!)\r\n\r\nimport React from 'react';\r\n\r\n// Import the Header component\r\nimport { Header } from './../header/header';\r\n\r\n// We import the Storage object\r\nimport { Storage } from './../../storage/storage';\r\n\r\n// And the BoardBox component\r\nimport { BoardBox } from './../boardBox/boardBox';\r\n\r\n// And the Popup component (to show a message when game ends)\r\nimport { Popup } from './../popup/popup';\r\n\r\n// Finally, import the utility functions\r\nimport * as Utils from './../../utils/functions';\r\n\r\n// Oh, and import the board style!\r\nimport './board.scss';\r\n\r\n// Let's create the Board component!\r\nexport class Board extends React.Component {\r\n    // Now we use this other way to declare our component\r\n    constructor(props) {\r\n        // Don't forget to pass our props to the parent component with super!\r\n        super(props);\r\n\r\n        // Now we have to initialize the component's state\r\n        this.state = {\r\n            // With the 'matrix' for the game\r\n            boxes: Array(9).fill(null),\r\n            // The array which contains all the movements done in the game\r\n            history: [],\r\n            // And a bool var with the next turn player\r\n            xIsNext: true\r\n        }\r\n        this.handleBoxClick = this.handleBoxClick.bind(this);\r\n    }\r\n\r\n    // Now we have to create an instace of the Storage object\r\n    storage = new Storage();\r\n\r\n    // Let's create the handlers\r\n    // First the handle of each box (the board boxes)\r\n    handleBoxClick = (index) => {\r\n        // First get the current state of the boxes\r\n        const boxes = this.state.boxes.slice();\r\n\r\n        // And the current state of history\r\n        let history = this.state.history;\r\n\r\n        // If the board contains a winning combination\r\n        // We can stop the game!!\r\n        if (Utils.findWinner(boxes) || boxes[index]) {\r\n            // Maybe not the best way to do this\r\n            // So I am adding a TODO here so I will check it later!\r\n\r\n            return;\r\n        }\r\n\r\n        // Also, we have to stop the game if all boxes are clicked (so they are filled)\r\n        if (Utils.areAllBoxesClicked(boxes) === true) {\r\n            return;\r\n        }\r\n\r\n        let boxMark = this.state.xIsNext ? 'x' : 'o';\r\n\r\n        // If we are still here, we can mark the clicked box as 'X' or 'O'\r\n        boxes[index] = boxMark;\r\n\r\n        // And add the move to the game history\r\n        history.push(boxMark);\r\n\r\n        // Finally, update the component state with the new data\r\n        // Remember, we update the component state with setState and not by\r\n        // modifying the state var!!!\r\n        this.setState({\r\n            boxes: boxes,\r\n            history: history,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    // Now we have to create the render function for this component\r\n    render() {\r\n        // If there is a winner, let's get it!\r\n        const winner = Utils.findWinner(this.state.boxes);\r\n\r\n        // Check if all boxes are filled (checked)\r\n        const isFilled = Utils.areAllBoxesClicked(this.state.boxes);\r\n\r\n        // This is just a var for our status message\r\n        let status;\r\n\r\n        // If there is a winner...\r\n        if (winner) {\r\n            // ...create a status message\r\n            // Notice the ` instead ' or \" to be able to use vars inside!\r\n            status = `The winner is: ${winner}!`;\r\n\r\n            // And push the data about the game to the storage\r\n            // This is not the coolest way to do this, so\r\n            // I add a TODO to improve it later\r\n            let old_storage = this.storage.getData();\r\n            old_storage = old_storage.concat([`${winner} won`]);\r\n            this.storage.update(old_storage);\r\n        } else if (!winner && isFilled) {\r\n            // If there is no winner but board is full\r\n            // The game is drawn, so create its status message\r\n            status = 'Game drawn!';\r\n\r\n            // And push it to the storage\r\n            this.storage.update(['Game drawn']);\r\n        } else {\r\n            // If the game is still running, we ask the next player\r\n            // to make its move\r\n            status = `It is ${(this.state.xIsNext ? 'x' : 'o')}'s turn.`;\r\n        }\r\n\r\n        // Now we have to return the rende result\r\n        return (\r\n            // We use <> and </> as the initial element since we need only one root element!\r\n            <>\r\n                {(winner || isFilled) && <Popup message={status}/>}\r\n                \r\n                {/* Add the link to the scoreboard */}\r\n                <Header showBackButton={true} />\r\n\r\n                {/* Now the game baord */}\r\n                <div className=\"board-wrapper\">\r\n                    <div className=\"board-item\">\r\n                        <div className=\"board\">\r\n\r\n                            {/* The heading */}\r\n                            <h2 className=\"board-heading\">{status}</h2>\r\n\r\n                            {/* The actual board */}\r\n                            <div className=\"board-row\">\r\n                                <BoardBox value={this.state.boxes[0]} onClick={() => this.handleBoxClick(0)} />\r\n                                <BoardBox value={this.state.boxes[1]} onClick={() => this.handleBoxClick(1)} />\r\n                                <BoardBox value={this.state.boxes[2]} onClick={() => this.handleBoxClick(2)} />\r\n                            </div>\r\n\r\n                            <div className=\"board-row\">\r\n                                <BoardBox value={this.state.boxes[3]} onClick={() => this.handleBoxClick(3)} />\r\n                                <BoardBox value={this.state.boxes[4]} onClick={() => this.handleBoxClick(4)} />\r\n                                <BoardBox value={this.state.boxes[5]} onClick={() => this.handleBoxClick(5)} />\r\n                            </div>\r\n\r\n                            <div className=\"board-row\">\r\n                                <BoardBox value={this.state.boxes[6]} onClick={() => this.handleBoxClick(6)} />\r\n                                <BoardBox value={this.state.boxes[7]} onClick={() => this.handleBoxClick(7)} />\r\n                                <BoardBox value={this.state.boxes[8]} onClick={() => this.handleBoxClick(8)} />\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board-item\">\r\n                        {/* The board history */}\r\n                        <div className=\"board-history\">\r\n                            <h2 className=\"board-heading\">Moves history</h2>\r\n\r\n                            {/* Here goes a list with the moves' history */}\r\n                            <ul className=\"board-historyList\">\r\n                                {this.state.history.length <= 0 && <p>No moves to show.</p>}\r\n\r\n                                {this.state.history.length > 0 && this.state.history.map((move, index) => {\r\n                                    return (\r\n                                        <li key={index}>Move {index + 1}: <strong>{move}</strong></li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","// This is also a stateful component!\r\n\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Import the Header component\r\nimport { Header } from './../header/header';\r\n\r\n// Import the Storage object!\r\nimport { Storage } from './../../storage/storage';\r\n\r\nimport './scoreboard.scss';\r\n\r\n// Now let's create the Scoreboard component\r\nexport class Scoreboard extends React.Component {\r\n    state = {\r\n        scoreboard: []\r\n    };\r\n\r\n    // Once the component mounts, load any data from local storage and update the component state\r\n    async componentDidMount() {\r\n        let storage = await new Storage().getData();\r\n\r\n        this.setState({\r\n            scoreboard: storage\r\n        });\r\n    }\r\n\r\n    // Now we have to create the component's render function\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <Header showBackButton={false} />\r\n                {/* Now a link to start a new game! */}\r\n                <div id=\"wrapper-start-game\">\r\n                    <Link to=\"/board\" className=\"btn-start-game\">\r\n                        <span>Start new game!</span>\r\n                    </Link>\r\n                </div>\r\n                <div id=\"wrapper-recent-games\">\r\n                    <h2>Recent games</h2>\r\n                    {/* And now we display a list with previous games */}\r\n                    <ul>\r\n                        {this.state.scoreboard.map((leader, key) => {\r\n                            return (\r\n                                <li key={key}>In this game, {leader}!</li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\n\r\n// First, import the Board and Scoreboard views\r\nimport {Board} from './../board/board';\r\nimport {Scoreboard} from './../scoreboard/scoreboard';\r\n\r\n// Now import the general styles\r\nimport './../../assets/sass/style.scss';\r\n\r\n// Let's create the App component\r\nexport class App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <BrowserRouter basename=\"/Tic-Tac-Toe-ReactJS/\">\r\n                {/*<BrowserRouter>*/}\r\n                    <Route exact path=\"/\" component={Scoreboard}/>\r\n                    <Route path=\"/board\" component={Board}/>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Let's import the App component\r\nimport {App} from './components/app/app';\r\n\r\n// Don't forget to call the ReactDOM render!\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}